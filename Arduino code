/*
Published by Miles Nash on 12.30.2018
project: "countdown-clock"
file: "Arduino code"
github: miles-nash
https://github.com/miles-nash/countdown-clock/new/master

License:
Attribution-NonCommercial-ShareAlike 
CC BY-NC-SA
Others may remix,tweak and build upon this work non-commercially,
as long as they credit me aND liscence their creations under these terms

*/
//THIS LINE AND ALL LINES ABOVE MUST BE INCLUDED IN REMIXED, TWEAKED, OR BUILT UPON CODE
#include <RGBmatrixPanel.h>
#define CLK  8   
#define OE   9
#define LAT 10
#define A   A0
#define B   A1
#define C   A2

RGBmatrixPanel matrix(A, B, C, CLK, LAT, OE, false);
int hue;
int8_t ball[3][4] = {
  {  3,  0,  1,  1 }, // Initial X,Y pos & velocity for 3 bouncy balls
  { 17, 15,  1, -1 },
  { 27,  4, -1,  1 }
};
static const uint16_t PROGMEM ballcolor[3] = {
  0x0080, // Green=1
  0x0002, // Blue=1
  0x1000  // Red=1
};

bool update;
int currentNum;
int lastUpdate = 0;


void setup() {
  hue = 0;
  currentNum = 20;
  matrix.setTextWrap(false); // Allow text to run off right edge
  matrix.begin();
  
}

void loop() {
  
   if(update){
      matrix.fillScreen(0);
      update = false;
    }
  
  if(millis() - lastUpdate >= 1000){
    lastUpdate = millis();
    currentNum --;
    if(currentNum >= 0){
      update = true;
    }
  }

  if(currentNum > 60 && currentNum < 3600){
    //min and sec display
    
    
  }
  if(currentNum < 10 && currentNum > 0){
    //matrix.fillScreen(0);
    matrix.setCursor(11,1);
    matrix.setTextSize(2);
    matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, true));
    matrix.print(currentNum);
      
  }  else if(currentNum < 60 && currentNum > 9){
    
    //matrix.fillScreen(matrix.Color333(0, 0, 0));
    matrix.setCursor(4,1);
    matrix.setTextSize(2);
    matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, true));
    matrix.print(currentNum);

  }  else if(currentNum <= 0){
    
    bounceBalls();
    matrix.setCursor(1,0);
    matrix.setTextSize(1);
    matrix.setTextColor(matrix.Color333(7,7,7));
    matrix.print("HAPPY");
    matrix.setCursor(5,9);
    matrix.print("2019");
    delay(3);
  }
  
  #if !defined(__AVR__)
    // On non-AVR boards, delay slightly so screen updates aren't too quick.
    delay(20);
  #endif
  
  hue += 1; //adjust to increase/decrease speed of pulsing
  
  if(hue >= 1536) hue -= 1536;

  matrix.swapBuffers(false);
 
}

void bounceBalls(){
  matrix.fillScreen(0);
  byte i;
  for(i=0; i<3; i++) {
    // Draw 'ball'
    matrix.fillCircle(ball[i][0], ball[i][1], 5, pgm_read_word(&ballcolor[i]));
    // Update X, Y position
    ball[i][0] += ball[i][2];
    ball[i][1] += ball[i][3];
    // Bounce off edges
    if((ball[i][0] == 0) || (ball[i][0] == (matrix.width() - 1)))
      ball[i][2] *= -1;
    if((ball[i][1] == 0) || (ball[i][1] == (matrix.height() - 1)))
      ball[i][3] *= -1;
  }
}
